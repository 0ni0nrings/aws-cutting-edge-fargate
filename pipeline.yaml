---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Cutting-Edge Fargate: Deployment Pipeline'
Parameters:
  GithubOwner:
    Type: String
  GithubRepo:
    Type: String
  GithubOAuthToken:
    Type: String
    NoEcho: true
  GithubSecret:
    Type: String
    NoEcho: true
Resources:
  ArtifactStore:
    Type: 'AWS::S3::Bucket'
  ArtifactsRepository:
    Type: 'AWS::ECR::Repository'
  CodeBuildLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 14
  CloudFormationRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'cloudformation.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/AdministratorAccess'
  PipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'codepipeline.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/AdministratorAccess'
  PackageRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'codebuild.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: ServiceRole # CodeBuild needs a set of access rights defined in https://docs.aws.amazon.com/codebuild/latest/userguide/setting-up.html#setting-up-service-role
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: CloudWatchLogsPolicy
            Effect: Allow
            Action:
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            Resource: !GetAtt 'CodeBuildLogGroup.Arn'
          - Sid: S3Policy
            Effect: Allow
            Action:
            - 's3:GetObject'
            - 's3:GetObjectVersion'
            - 's3:PutObject'
            Resource: !Sub '${ArtifactStore.Arn}/*'
  PackageProject:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: 'BUILD_GENERAL1_SMALL'
        Image: 'amazonlinux:2.0.20181114'
        Type: 'LINUX_CONTAINER'
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: !Ref CodeBuildLogGroup
          StreamName: 'package'
      ServiceRole: !GetAtt 'PackageRole.Arn'
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            install:
              commands:
              - 'yum -y install python2-pip'
              - 'pip install awscli==1.16.90'
              - 'curl -sL https://rpm.nodesource.com/setup_10.x | bash -'
              - 'yum -y install nodejs'
            build:
              commands:
              - 'npm install'
              - 'aws cloudformation package --template-file fargate.yaml --s3-bucket ${ArtifactStore} --force-upload --output-template-file output.yaml'
          artifacts:
            files:
            - 'output.yaml'
      TimeoutInMinutes: 10
  BuildImageRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'codebuild.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: ServiceRole # CodeBuild needs a set of access rights defined in https://docs.aws.amazon.com/codebuild/latest/userguide/setting-up.html#setting-up-service-role
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: CloudWatchLogsPolicy
            Effect: Allow
            Action:
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            Resource: !GetAtt 'CodeBuildLogGroup.Arn'
          - Sid: S3Policy
            Effect: Allow
            Action:
            - 's3:GetObject'
            - 's3:GetObjectVersion'
            - 's3:PutObject'
            Resource: !Sub '${ArtifactStore.Arn}/*'
          - Sid: ECR
            Effect: 'Allow'
            Action: 'ecr:GetAuthorizationToken'
            Resource: '*'
          - Sid: ECRRepo
            Effect: 'Allow'
            Action:
            - 'ecr:BatchCheckLayerAvailability'
            - 'ecr:CompleteLayerUpload'
            - 'ecr:InitiateLayerUpload'
            - 'ecr:PutImage'
            - 'ecr:UploadLayerPart'
            Resource: !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${ArtifactsRepository}'
  BuildImageProject:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: 'BUILD_GENERAL1_LARGE'
        Image: 'aws/codebuild/docker:1.12.1'
        Type: 'LINUX_CONTAINER'
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: !Ref CodeBuildLogGroup
          StreamName: 'build-image'
      ServiceRole: !GetAtt 'BuildImageRole.Arn'
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            pre_build:
              commands:
              - 'export TAG_NGINX="${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ArtifactsRepository}:nginx-$(date +"%s")"'
              - 'export TAG_PHP_FPM="${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ArtifactsRepository}:php-fpm-$(date +"%s")"'
            build:
              commands:
              - 'docker build -t "${!TAG_NGINX}" -f docker/nginx/Dockerfile .'
              - 'docker build -t "${!TAG_PHP_FPM}" -f docker/php-fpm/Dockerfile .'
            post_build:
              commands:
              - 'eval $(aws ecr get-login --no-include-email)'
              - 'docker push "${!TAG_NGINX}"'
              - 'docker push "${!TAG_PHP_FPM}"'
              - 'echo "{\"AmbassadorImage\": \"${!TAG_NGINX}\", \"AppImage\": \"${!TAG_PHP_FPM}\"}" > image.json'
          artifacts:
            files:
            - 'image.json'
      TimeoutInMinutes: 10
  Webhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref GithubSecret
      Filters:
      - JsonPath: "$.ref"
        MatchEquals: refs/heads/{Branch}
      TargetPipeline: !Ref Pipeline
      TargetAction: FetchSource
      TargetPipelineVersion: !GetAtt Pipeline.Version
      RegisterWithThirdParty: true
  Pipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactStore
      Name: !Ref 'AWS::StackName'
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt 'PipelineRole.Arn'
      Stages:
      - Name: Source
        Actions:
        - Name: FetchSource
          ActionTypeId:
            Category: Source
            Owner: ThirdParty
            Provider: GitHub
            Version: '1'
          Configuration:
            Owner: !Ref GithubOwner
            Repo: !Ref GithubRepo
            Branch: 'master'
            OAuthToken: !Ref GithubOAuthToken
            PollForSourceChanges: false
          OutputArtifacts:
          - Name: Source
          RunOrder: 1
      - Name: Pipeline
        Actions:
        - Name: DeployPipeline
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Provider: CloudFormation
            Version: '1'
          Configuration:
            ActionMode: CREATE_UPDATE
            Capabilities: CAPABILITY_IAM
            RoleArn: !GetAtt 'CloudFormationRole.Arn'
            StackName: !Ref 'AWS::StackName'
            TemplatePath: 'Source::pipeline.yaml'
            ParameterOverrides: !Sub |
              {
                "GithubOwner": "${GithubOwner}", 
                "GithubRepo": "${GithubRepo}", 
                "GithubOAuthToken": "${GithubOAuthToken}", 
                "GithubSecret": "${GithubSecret}"
              }
          InputArtifacts:
          - Name: Source
          RunOrder: 1
      - Name: Commit
        Actions:
        - Name: Package
          ActionTypeId:
            Category: Build
            Owner: AWS
            Provider: CodeBuild
            Version: '1'
          Configuration:
            ProjectName: !Ref PackageProject
          InputArtifacts:
          - Name: Source
          OutputArtifacts:
          - Name: Package
          RunOrder: 1
        - Name: BuildImage
          ActionTypeId:
            Category: Build
            Owner: AWS
            Provider: CodeBuild
            Version: '1'
          Configuration:
            ProjectName: !Ref BuildImageProject
          InputArtifacts:
          - Name: Source
          OutputArtifacts:
          - Name: Image
          RunOrder: 1
      - Name: Production
        Actions:
        - Name: Deploy
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Provider: CloudFormation
            Version: '1'
          Configuration:
            ActionMode: CREATE_UPDATE
            Capabilities: CAPABILITY_IAM
            RoleArn: !GetAtt 'CloudFormationRole.Arn'
            StackName: 'prod-fargate'
            TemplatePath: 'Package::output.yaml'
            TemplateConfiguration: 'Source::fargate.json'
            OutputFileName: 'output.json'
          InputArtifacts:
          - Name: Source
          - Name: Package
          - Name: Image
